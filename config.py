import os

# --- API Keys ---
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ALPHA_VANTAGE_API_KEY = os.getenv("ALPHA_VANTAGE_API_KEY")

# --- Static Tool Definitions for OpenAI's API ---
STATIC_TOOLS = [
    { "type": "function", "function": { "name": "read_csv_tool", "description": "Reads a local CSV file and returns its contents as a JSON string.", "parameters": { "type": "object", "properties": { "filepath": { "type": "string", "description": "The path to the CSV file (e.g., 'data/sales_data.csv').", } }, "required": ["filepath"], }, }, },
    { "type": "function", "function": { "name": "list_directory_tool", "description": "Lists all files and directories in a given path.", "parameters": { "type": "object", "properties": { "path": { "type": "string", "description": "The path to the directory (e.g., 'data/').", } }, "required": ["path"], }, }, },
    { "type": "function", "function": { "name": "plot_data_tool", "description": "Generates a plot from structured data and saves it as an image. Returns the image path. Supported plot types are: 'bar', 'line', 'scatter', 'histogram', and 'boxplot'.", "parameters": { "type": "object", "properties": { "data": { "type": "string", "description": "A JSON string of records, as returned by a tool like read_csv_tool or fetch_stock_data.", }, "plot_type": { "type": "string", "description": "The type of plot to generate. Supported types are 'bar', 'line', 'scatter', 'histogram', and 'boxplot'.", "enum": ["bar", "line", "scatter", "histogram", "boxplot"] }, "x_axis": { "type": "string", "description": "The column name for the x-axis.", }, "y_axis": { "type": "string", "description": "(Optional) The column name for the y-axis. Required for 'bar', 'line', and 'scatter' plots.", }, }, "required": ["data", "plot_type", "x_axis"], }, }, },
    { "type": "function", "function": { "name": "summarize_text", "description": "Summarizes a given text using a powerful LLM.", "parameters": { "type": "object", "properties": { "text": { "type": "string", "description": "The text to be summarized.", } }, "required": ["text"], }, }, },
    { "type": "function", "function": { "name": "fetch_stock_data", "description": "Fetches daily stock time series data for a given stock symbol from an external API.", "parameters": { "type": "object", "properties": { "symbol": { "type": "string", "description": "The stock ticker symbol (e.g., 'AAPL', 'GOOGL').", }, "outputsize": { "type": "string", "description": "The size of the data output. 'compact' returns the last 100 days. 'full' returns the full time series.", "enum": ["compact", "full"], }, }, "required": ["symbol"], }, }, },
    { "type": "function", "function": { "name": "extract_text_from_pdf", "description": "Extracts text from a PDF file.", "parameters": { "type": "object", "properties": { "filepath": { "type": "string", "description": "The path to the PDF file (e.g., 'data/document.pdf').", } }, "required": ["filepath"], }, }, },
    { "type": "function", "function": { "name": "execute_python_code_tool", "description": "Executes a string of Python code to perform data manipulation on a pandas DataFrame. The DataFrame is available as 'df'.", "parameters": { "type": "object", "properties": { "code": { "type": "string", "description": "The Python code to execute. Can be a single line or multiple lines.", }, "data": { "type": "string", "description": "The data to be loaded into the DataFrame 'df' before execution. Provide this as a JSON string. If not provided, the tool will operate on the last known state of the DataFrame." } }, "required": ["code"], }, }, }
]